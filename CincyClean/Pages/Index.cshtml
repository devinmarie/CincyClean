@page
@model IndexModel
@{
    ViewData["Title"] = "Request Cleaning";
}

<div class="text-center bottom-margin-sm">
    <h1>Request Cleaning</h1>
</div>

<div id="app">
    <form class="needs-validation" novalidate v-on:submit.prevent="checkForm">
        <div class="form-row">
            <div class="col-md-6 mb-3">
                <label for="firstname">First Name: </label>
                <input type="text" class="form-control" id="firstname" v-model="firstname" required />
                <div class="invalid-feedback" v-if="errors.firstname">
                    {{ errors.firstname }}
                </div>
            </div>
            <div class="col-md-6 mb-3">
                <label for="lastname">Last Name: </label>
                <input type="text" class="form-control" id="lastname" v-model="lastname" required />
                <div class="invalid-feedback" v-if="errors.lastname">
                    {{ errors.lastname }}
                </div>
            </div>
        </div>
        <div class="form-row">
            <div class="col-md-4 mb-3">
                <label for="phonenumber">Phone Number: </label>
                <input type="text" class="form-control" id="phonenumber" v-model="phonenumber" placeholder="(XXX) XXX-XXXX" pattern="/^(\([0-9]{3}\) |[0-9]{3}-)[0-9]{3}-[0-9]{4}$/" required />
                <div class="invalid-feedback" v-if="errors.phonenumber">
                    {{ errors.phonenumber }}
                </div>
            </div>
            <div class="col-md-4 mb-3">
                <label for="email">Email: </label>
                <input type="email" class="form-control" id="email" v-model="email" placeholder="username@email.com" required />
                <div class="invalid-feedback" v-if="errors.email">
                    {{ errors.email }}
                </div>
            </div>
            <div class="col-md-4 mb-3">
                <label for="address">Address: </label>
                <div class="input-group">
                    <a id="geoClick" class="btn btn-outline-dark" v-on:click="getGeo">Auto-fill Address</a>
                    <input type="text" class="form-control" id="address" v-model="address" required />
                    <div class="invalid-feedback" v-if="errors.address">
                        {{ errors.address }}
                    </div>
                </div>
            </div>
        </div>
        <div class="form-row">
            <div class="col-md-4 mb-3">
                <label for="service">Choose your Service: </label>
                <select v-model="service" class="form-control" v-on:change="modifyPrice">
                    <option v-for="(option, index) in serviceOptions" v-bind:value="option.value">
                        {{ option.text }}
                    </option>
                </select>
                <div class="invalid-feedback" v-if="errors.service">
                    {{ errors.service }}
                </div>
            </div>
            <div class="col-md-4 mb-3">
                <label for="roomcount">Number of Rooms: </label>
                <input type="number" class="form-control" min="1" v-model="roomcount" v-on:change="modifyPrice" id="roomcount" required />
                <div class="invalid-feedback" v-if="errors.roomcount">
                    {{ errors.roomcount }}
                </div>
            </div>
            <div class="col-md-4 mb-3">
                <label for="price">Price: </label>
                <input type="text" class="form-control" id="price" v-model="price" readonly />
            </div>
        </div>
        <div class="row text-center">
            <div class="col">
                <button type="submit" id="submitrequest" class="btn btn-dark">Submit Request</button>
            </div>
        </div>
    </form>
</div>


@section Scripts
{
    <script type="text/javascript">
        var app = new Vue({
            el: "#app",
            data: {
                // PLACE DATA PROPERTIES HERE
                firstname: null,
                lastname: null,
                phonenumber: null,
                email: null,
                address: null,
                price: null,
                service: null,
                roomcount: 1,
                serviceOptions: [],
                servicePrices: [],
                requests: [],
                errors: []
            },
            mounted: function () {
                // PERFORM ANY ACTIONS WHEN THE PAGE LOADS HERE - SIMILAR TO JQUERY DOCUMENT.READY
                (function () {
                    'use strict';
                    window.addEventListener('load', function () {
                        // Fetch all the forms we want to apply custom Bootstrap validation styles to
                        var forms = document.getElementsByClassName('needs-validation');
                        // Loop over them and prevent submission
                        var validation = Array.prototype.filter.call(forms, function (form) {
                            form.addEventListener('submit', function (event) {
                                if (form.checkValidity() === false) {
                                    event.preventDefault();
                                    event.stopPropagation();
                                }
                                form.classList.add('was-validated');
                            }, false);
                        });
                    }, false);
                })();

                $.ajax({
                    method: "GET",
                    url: "/api/Services",
                    dataType: "JSON",
                    contentType: "application/json"
                }).done(function (data) {
                    $.each(data, function (index, item) {
                        app.serviceOptions.push({ text: item.serviceName, value: item.serviceId });
                        if (index === 0)
                            app.service = item.serviceId;
                        app.servicePrices[item.serviceId] = item.pricePerService;
                    });
                    app.modifyPrice();
                }).fail(function () {
                    console.log("requests did not get presented");
                });
            },
            methods: {
                // ADD ANY METHODS (CLICK, SUBMIT EVENTS, ETC.)
                validateEmail: function (email) {
                    const re = /^\w+([\.-]?\w+)*@@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
                    return re.test(email);
                },
                size: function (obj) {
                    var size = 0,
                        key;
                    for (key in obj) {
                        if (obj[key].length != 0) size++;
                    }
                    return size;
                },
                getGeo: function () {
                    var self = this;
                    navigator.geolocation.getCurrentPosition(function (location) {
                        var geocoder = new google.maps.Geocoder();
                        var latLng = new google.maps.LatLng(
                            location.coords.latitude,
                            location.coords.longitude
                        );
                        geocoder.geocode(
                            {
                                latLng: latLng,
                            },
                            function (results, status) {
                                for (var i = 0; i < results[0].address_components.length; i++) {
                                    var address = results[0].address_components[i];
                                    if (address.types[0] == "postal_code") {
                                        self.address = results[0].formatted_address;
                                    }
                                }
                            }
                        );
                    })
                },
                modifyPrice: function () {
                    var self = this;
                    var value = this.service;
                    app.price = app.servicePrices[value] * app.roomcount;
                },
                checkForm: function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    this.errors = [];
                    if (!this.firstname) {
                        this.errors["firstname"] = "Firstname is required";
                    }

                    if (!this.lastname) {
                        this.errors["lastname"] = "Lastname is required";
                    }

                    if (!this.phonenumber) {
                        this.errors["phonenumber"] = "Phone number is required";
                    } else if (!(/^(\([0-9]{3}\) |[0-9]{3}-)[0-9]{3}-[0-9]{4}$/.test(this.phonenumber))) {
                        this.errors["phonenumber"] = "Please enter phonenumber in valid format (XXX) XXX-XXXX";
                    }

                    if (!this.email) {
                        this.errors["email"] = "Email is required";
                    } else if (!(this.validateEmail(this.email))) {
                        this.errors["email"] = "Please enter valid Email";
                    }

                    if (!this.address) {
                        this.errors["address"] = "Address is required";
                    }

                    if (!this.service) {
                        this.errors["service"] = "Service is required";
                    }

                    if (!this.roomcount) {
                        this.errors["roomcount"] = "Number of Rooms is required";
                    } else if (this.roomcount <= 0) {
                        this.errors["roomcount"] = "Number of Rooms should be positive number";
                    }

                    if (this.size(this.errors) > 0) {
                        return false;
                    }
                    

                    this.submitRequest();
                },
                submitRequest: function () {
                    data = {
                        firstname: app.firstname,
                        lastname: app.lastname,
                        phone: app.phonenumber,
                        email: app.email,
                        address: app.address,
                        totalPrice: app.price,
                        serviceId: app.service
                    }
                    $.ajax({
                        method: "POST",
                        url: "/api/Requests",
                        data: JSON.stringify(data),
                        dataType: "JSON",
                        contentType: "application/json"
                    }).done(function (data) {
                        $('form').trigger("reset");
                        $('form').removeClass('was-validated');
                        $('#submitrequest').parent('.col').append('<div class="col" id="successMsg">Request submitted successfully!</div>');
                        $('#successMsg').fadeOut('xslow', function () {
                            $(this).remove();
                        })
                    }).fail(function () {
                        console.log("requests did not get presented");
                    });
                }

            },
            computed: {
                // CREATE ANY CALCULATED PROPERTIES HERE. THEY BEHAVE LIKE READ-ONLY DATA
                sum: function () {
                    var self = this;
                    return self.firstname + " " + self.lastname;
                }
            }
        });
    </script>
}